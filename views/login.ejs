<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-wEmeIV1mKuiNpC+IOBjI7aAzPcEZeedi5yW5f2yOq55WWLwNGmvvx4Um1vskeMj0" crossorigin="anonymous">
    <link rel="stylesheet" href="./styles/index.css">
    
    <title>Login - UrbaCrop</title>
    <!-- Favicon Links -->
    <link rel="apple-touch-icon" sizes="180x180" href="./favicon_package/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="./favicon_package/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="./favicon_package/favicon-16x16.png">
    <link rel="manifest" href="./favicon_package/site.webmanifest">
    <link rel="mask-icon" href="./favicon_package/safari-pinned-tab.svg" color="#00a300">
    <meta name="msapplication-TileColor" content="#da532c">
    <meta name="theme-color" content="#ffffff">
    
</head>

<body>
    <div class="my-5 text-center">
        <h1>Welcome to </h1>
        <img src="./images/Full Logo (PNG).png" class="img-fluid" alt="UrbaCrop Full Logo">
    </div>

    <div class="my-3 container">
        <form action="/" method="POST" class="border border-success rounded my-3 p-3 needs-validation" style="background-color: #e2efdd;" novalidate>
            <div class="mb-3 row">
                <div class="col-3">
                    <label for="loginUsername" class="col-form-label">Username: </label>
                </div>
                <div class="col-8">
                    <input type="text" class="form-control" id="loginUsername" name="loginUsername" required>
                    <div class="invalid-feedback">
                        Please provide a username.
                      </div>
                      <div id="usernameErrorMessage" style="color: red;"><%= usernameErrorMessage %></div>   
                </div>             
            </div>
            <div class="mb-3 row">
                <div class="col-3">
                    <label for="loginPassword" class="form-label">Password: </label>
                </div>
                <div class="col-8">
                    <input type="password" class="form-control" id="loginPassword" name="loginPassword" required>
                    <div class="invalid-feedback">
                        Please enter a password.
                      </div>
                      <div id="passwordErrorMessage" style="color: red;"><%= passwordErrorMessage %></div>
                </div>                
            </div>
            <div class="text-center mb-3">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
          </form>
          <p class="text-center">Don't have an account? <a href="./signup">Sign up</a></p>
    </div>

    

    <!-- Option 1: Bootstrap Bundle with Popper -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js"
  integrity="sha384-p34f1UUtsS3wqzfto5wAAmdvj+osOnFyQFpp4Ua3gs/ZVWx6oOypYoCJhGGScy+8"
  crossorigin="anonymous"></script>
  <!-- <script src="./scripts/login.js"></script> -->
  <script>
 // Example starter JavaScript for disabling form submissions if there are invalid field

 (function() {
    'use strict';
    window.addEventListener('load', function() {
        // const express = require("express");
        // const mongoose = require('mongoose');

        // let url = 'mongodb+srv://userTest:userTestPassword@cluster0.o4dh9.mongodb.net/UserTest?retryWrites=true&w=majority';
        // mongoose.connect(url, {useNewUrlParser: true, useUnifiedTopology: true});
        // let userInfo = require('./models/userInfo');
        // let db = mongoose.connection;

        // db.once('open', function() {
        //     console.log('Connection was succesfull');
        // })
        // Fetch all the forms we want to apply custom Bootstrap validation styles to
        var forms = document.getElementsByClassName('needs-validation');
        var loginPassword = document.getElementById('loginPassword');
        var loginUsername = document.getElementById('loginUsername');
        // Loop over them and prevent submission
        var validation = Array.prototype.filter.call(forms, function(form) {
        form.addEventListener('submit', function(event) {
            
            if (form.checkValidity() === false) {
            event.preventDefault();
            event.stopPropagation();
            }
            // else {
            //     console.log("123");
            // }
            //console.log("1"+loginUsername.value);
            // userInfo.findOne({username: loginUsername.value}, (err, docs) => {
            //     if (err) {
            //         console.log(err);
            //     }
            //     else {
            //         console.log('found:' + docs);
            //         var usernameErrorDiv = document.getElementById('usernameErrorMessage');
            //         var passwordErrorDiv = document.getElementById('passwordErrorMessage');
            //         if (docs == null)  {
            //             event.preventDefault();
            //             event.stopPropagation();
            //             //passwordErrorDiv.innerHTML = "";
            //             if (usernameErrorDiv.innerHTML === "") {
            //                 let node = document.createTextNode ("*Username doesn't exist.");
            //                 usernameErrorDiv.appendChild(node);
            //                 usernameErrorDiv.style.color = "red";
            //             }
            //         }
            //         else {
            //             //usernameErrorDiv.innerHTML = "";
            //             if (loginPassword != docs.password) {
            //                 event.preventDefault();
            //                 event.stopPropagation();
            //                 if (passwordErrorDiv.innerHTML === "") {
            //                     let node = document.createTextNode ('*Incorrect password.');
            //                     passwordErrorDiv.appendChild(node);
            //                     passwordErrorDiv.style.color = "red";
            //                 }
            //             }
            //         }
            //     }
            // });

            form.classList.add('was-validated');
        }, false);
        });
    }, false);
    })();
  </script>
</body>
</html>